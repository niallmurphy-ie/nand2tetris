// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
        Not(in=instruction[15], out=notInstruction);
        Mux16(a=aluOutToMux, b=instruction, sel=notInstruction, out=instructionOut);

        // A
        // [5] is 1xx in the d1,d2,d3 part of C instruction
        // [15] checks of C
        Or(a=notInstruction, b=instruction[5], out=storeInA);
        ARegister(
            in=instructionOut, load=storeInA,
            out=aRegisterOut,
            out[0..14]=addressM,
            out=aToPC
        );

        // A or M comes from the "a" part of instruction
        And(a=instruction[15],b=instruction[12],out=aOrM);
        Mux16(a=aRegisterOut, b=inM, sel=aOrM, out=aOrInMMuxOut);
        ALU(
            x=dOut, y=aOrInMMuxOut, zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
            out=aluOutToD,
            out=aluOutToMux,
            out=outM,
            zr=zr, ng=ng
        );

        // D
        // [4] is x1x in the d1,d2,d3 part of C instruction
        // [15] checks of C
        And(a=instruction[15], b=instruction[4], out=storeInD);
        DRegister(in=aluOutToD, load=storeInD, out=dOut);

        // writeM
        // [3] is xx1 in the d1,d2,d3 part of C instruction
        // [15] checks of C
        And(a=instruction[15], b=instruction[3], out=writeM);

        // Jumps
        // zr, // 1 if out=0, 0 otherwise
        // ng; // 1 if out<0, 0 otherwise
        Not(in=ng, out=notNegative);
        Not(in=zr, out=notZero);
        Or(a=zr, b=ng, out=zeroOrNegative);
        Not(in=zeroOrNegative, out=positive);

        And(a=instruction[0], b=positive, out=jgt);
        And(a=instruction[1], b=zr, out=jeq);

        And(a=instruction[0], b=instruction[1], out=positiveOrZero);
        And(a=positiveOrZero, b=notNegative, out=jge);

        And(a=instruction[2], b=ng, out=jlt);

        And(a=instruction[0], b=instruction[2], out=jumpNotZero);
        And(a=jumpNotZero, b=notZero, out=jne);

        And(a=instruction[1], b=instruction[2], out=negativeOrZero);
        And(a=negativeOrZero, b=zeroOrNegative, out=jle);

        Or8Way(
            in[0]=jgt,
            in[1]=jeq,
            in[2]=jge,
            in[3]=jlt,
            in[4]=jne,
            in[5]=jle,
            in[6..7]=false,
            out=j
        );

        And(a=instruction[15], b=j, out=jump);

        Not(in=jump, out=increment);

        PC(in=aToPC, load=jump, inc=increment, reset=reset, out[0..14]=pc);

}