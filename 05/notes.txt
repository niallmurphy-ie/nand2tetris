0x3FFF - 011111111111111 - 15th 0 - address[14]
0x4000 - 100000000000000
0x5FFF - 101111111111111
0x6000 - 110000000000000 - 14th 1 - address[13]


/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:

 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */


int memoryLocation = 16;
@ponggame.0 16
@math.1 17     <-- 16
@math.0 18
@memory.0 19
@output.4 20
@output.2 21
@output.1 22
@output.0 23
@output.3 24
@output.5 25
@output.6 26
@screen.1 27
@screen.2 28
@screen.0 29

int memoryLocation = 15;
@ponggame.0 15   <-- 16
@math.1 16
@math.0 17
@memory.0 18
@output.4 19
@output.2 20
@output.1 21
@output.0 22
@output.3 23
@output.5 24
@output.6 25
@screen.1 26
@screen.2 27
@screen.0 28


